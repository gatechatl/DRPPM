package stjude.projects.mckinnon;

import general.sequence.analysis.GCScanner;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.HashMap;

public class McKinnonCalculateGCSkew {

	public static String description() {
		return "Caclulate GC Skew GC Percentage GC Density based on the fasta file generated by Hongjian and annotation File. Fasta file was generated based on the BED file";
	}
	public static String type() {
		return "MCKINNON";
	}
	public static String parameter_info() {
		return "[inputFastaFile] [annotationFile]";
	}
	public static void execute(String[] args) {
		try {
			
			//GCScanner
			
			String inputFastaFile = args[0];
			String annotationFile = args[1];
			
			HashMap map = new HashMap();
			FileInputStream fstream = new FileInputStream(annotationFile);
			DataInputStream din = new DataInputStream(fstream);
			BufferedReader in = new BufferedReader(new InputStreamReader(din));		
			String header = in.readLine();
			while (in.ready()) {
				String str = in.readLine();								
				String[] split = str.split("\t");
				String chr = split[0];
				String start = split[1];
				String end = split[2];
				String tag = chr + ":" + start + "-" + end + "()";
				map.put(tag, str);
				//chr1:10015-10662()				
			}
			in.close();
			System.out.println(header + "\tGC_Percentage\tGC_Skew\tCpGDensity");
			fstream = new FileInputStream(inputFastaFile);
			din = new DataInputStream(fstream);
			in = new BufferedReader(new InputStreamReader(din));			
			while (in.ready()) {
				String tag = in.readLine().replaceAll(">", "").trim();								
				String seq = in.readLine().toUpperCase();
				double cpgDensity = GCScanner.calculate_CpGDensity(seq);
				double gc_percentage = GCScanner.calculate_GC(seq);
				double gc_skew = GCScanner.calculate_GCSkew(seq);
				if (map.containsKey(tag)) {
					String line = (String)map.get(tag);
					System.out.println(line + "\t" + gc_percentage + "\t" + gc_skew + "\t" + cpgDensity);
				}
			}
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
