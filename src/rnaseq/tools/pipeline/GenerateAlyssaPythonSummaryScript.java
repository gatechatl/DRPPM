package rnaseq.tools.pipeline;

import java.io.BufferedWriter;
import java.io.FileWriter;

/**
 * Generate Alyssa Obermayer's python summary program: summarygen.py for WRAP RseQC output
 * @author gatechatl
 *
 */
public class GenerateAlyssaPythonSummaryScript {

	public static String type() {
		return "RNASEQ";
	}
	public static String description() {
		return "Generate python script to summarize the RseQC";
	}
	public static String parameter_info() {
		return "[ no parameters... ]";
	}
	public static void execute(String[] args) {
		
		try {
			

			FileWriter fwriter = new FileWriter("summarygen.py");
			BufferedWriter out = new BufferedWriter(fwriter);						

			StringBuffer string_buffer = new StringBuffer();			
			string_buffer.append("#! /bin/python3.9.5\n");
			string_buffer.append("\n");
			string_buffer.append("import sys\n");
			string_buffer.append("import numpy as np\n");
			string_buffer.append("import argparse\n");
			string_buffer.append("\n");
			string_buffer.append("####----Compatibility----####\n");
			string_buffer.append("\n");
			string_buffer.append("#compatible with RSeQC v4.0.0\n");
			string_buffer.append("\n");
			string_buffer.append("#must include 7 input files in correct order\n");
			string_buffer.append("#sample input: python summarygen.py {SAMPLENAME}.Aligned.sortedByCoord.out.summary.txt {SAMPLENAME}_junction_annotation_summary_more.txt rseqc_bam_stat_report.txt {SAMPLENAME}.STAR.Log.final.out {SAMPLENAME}_infer_experiment.txt {SAMPLENAME}_inner_distance.txt {SAMPLENAME}_read_distribution.txt {SAMPLENAME}_intron_summary.txt\n");
			string_buffer.append("#tin.py                 -- {SAMPLENAME}.Aligned.sortedByCoord.out.summary.txt\n");
			string_buffer.append("#junction_annotation.py -- {SAMPLENAME}_junction_annotation_summary_more.txt\n");
			string_buffer.append("#bam_stat.py            -- rseqc_bam_stat_report.txt (sample specific)\n");
			string_buffer.append("#STAR_log_final         -- {SAMPLENAME}.STAR.Log.final.out (from STAR mapping)\n");
			string_buffer.append("#infer_experiment.py    -- {SAMPLENAME}_infer_experiment.txt\n");
			string_buffer.append("#inner_distance.py      -- {SAMPLENAME}_inner_distance.txt\n");
			string_buffer.append("#read_distribution.py   -- {SAMPLENAME}_read_distribution.txt\n");
			string_buffer.append("#splicing deficiency    -- {SAMPLENAME}_intron_summary.txt\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("parser=argparse.ArgumentParser(description='Combine summary files to generate global sample summary.')\n");
			string_buffer.append("\n");
			string_buffer.append("parser.add_argument('-t','--tin', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='',help='path to TIN summary file')\n");
			string_buffer.append("parser.add_argument('-j','--juncanno', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to junction annotation summary file')\n");
			string_buffer.append("parser.add_argument('-b','--bamstat', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to bam stat summary file')\n");
			string_buffer.append("parser.add_argument('-l','--logfin', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to STAR log final output file')\n");
			string_buffer.append("parser.add_argument('-e','--inferexp', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to infer experiment summary file')\n");
			string_buffer.append("parser.add_argument('-d','--innerdist', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to inner distance summary file')\n");
			string_buffer.append("parser.add_argument('-r','--readdist', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to read distribution summary file')\n");
			string_buffer.append("parser.add_argument('-n','--intron', type=argparse.FileType('r'), const=1, nargs='?', required=False, default=1, metavar='', help='path to intron summary file')\n");
			string_buffer.append("parser.add_argument('-s','--samplename', required=False, nargs='?', default=1, metavar='', help='Sample name input to identify output file')\n");
			string_buffer.append("parser.add_argument('-R','--row', action='store_true', required=False, help='Outfile given in row format, if not specified both row and column file formats given')\n");
			string_buffer.append("parser.add_argument('-C','--column', action='store_true', required=False, help='Outfile given in column format, if not specified both row and column file formats given')\n");
			string_buffer.append("\n");
			string_buffer.append("args=parser.parse_args()\n");
			string_buffer.append("\n");
			string_buffer.append("####----Input----####\n");
			string_buffer.append("tin=args.tin\n");
			string_buffer.append("juncanno=args.juncanno\n");
			string_buffer.append("bamstat=args.bamstat\n");
			string_buffer.append("logfin=args.logfin\n");
			string_buffer.append("inferexp=args.inferexp\n");
			string_buffer.append("innerdist=args.innerdist\n");
			string_buffer.append("readdist=args.readdist\n");
			string_buffer.append("intron=args.intron\n");
			string_buffer.append("samp=args.samplename\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("mainheader=np.array(['init'])\n");
			string_buffer.append("mainstats=np.array(['init'])\n");
			string_buffer.append("\n");
			string_buffer.append("####----TIN file----####\n");
			string_buffer.append("if tin == 1:\n");
			string_buffer.append("	print(\"TIN summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	tinheader=tin.read().splitlines()[0] #extract header\n");
			string_buffer.append("	tinheader=tinheader.split('\t') #split by tab delim\n");
			string_buffer.append("	TINmean=tinheader[1]\n");
			string_buffer.append("	TINmed=tinheader[2]\n");
			string_buffer.append("	TINsd=tinheader[3]\n");
			string_buffer.append("	mainheader=np.append(mainheader, ['Sample',TINmean,TINmed,TINsd])\n");
			string_buffer.append("	tin.seek(0)\n");
			string_buffer.append("	tinstat=tin.read().splitlines()[1]\n");
			string_buffer.append("	tinstat2=tinstat.split('\t')\n");
			string_buffer.append("	sampname=tinstat2[0].split('.')[0]\n");
			string_buffer.append("	TINmeannum=tinstat2[1]\n");
			string_buffer.append("	TINmednum=tinstat2[2]\n");
			string_buffer.append("	TINsdnum=tinstat2[3]\n");
			string_buffer.append("	mainstats=np.append(mainstats, [sampname,TINmeannum,TINmednum,TINsdnum])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----junction annotation----####\n");
			string_buffer.append("found_sect = False\n");
			string_buffer.append("if juncanno == 1:\n");
			string_buffer.append("	print(\"Junction Annotation summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	for line in juncanno.read().splitlines():\n");
			string_buffer.append("		if line.startswith('='):\n");
			string_buffer.append("			found_sect = True\n");
			string_buffer.append("		elif found_sect:\n");
			string_buffer.append("			if ':' in line:\n");
			string_buffer.append("				head=line.replace(' ','_').split('\t')[0].split(':')[0]\n");
			string_buffer.append("				val=line.split('\t')[-1]\n");
			string_buffer.append("				mainheader=np.append(mainheader,[head])\n");
			string_buffer.append("				mainstats=np.append(mainstats,[val])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----BAM stat report----####\n");
			string_buffer.append("if bamstat == 1:\n");
			string_buffer.append("	print(\"BAM Stat Report summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	for line in bamstat.read().splitlines()[5:]:\n");
			string_buffer.append("		if ':' in line:\n");
			string_buffer.append("			head=line.replace(' ','_').split(':')[0]\n");
			string_buffer.append("			if '<' in head:\n");
			string_buffer.append("				head='mapq_non_unique_reads'\n");
			string_buffer.append("			if '>=' in head:\n");
			string_buffer.append("				head='mapq_unique_reads'\n");
			string_buffer.append("			val=line.replace(' ','').split(':')[-1]\n");
			string_buffer.append("			mainheader=np.append(mainheader,[head])\n");
			string_buffer.append("			mainstats=np.append(mainstats,[val])\n");
			string_buffer.append("		elif 'Non primary hits' in line: #special instance for missing semicolon in file\n");
			string_buffer.append("			head='_'.join(line.split(' ')[0:3])\n");
			string_buffer.append("			val=line.split(' ')[-1]\n");
			string_buffer.append("			mainheader=np.append(mainheader,[head])\n");
			string_buffer.append("			mainstats=np.append(mainstats,[val])\n");
			string_buffer.append("\n");
			string_buffer.append("# adjust for special characters\n");
			string_buffer.append("mainheader=[s.replace(\"'+'\",\"pos\") for s in mainheader] #positive\n");
			string_buffer.append("mainheader=[s.replace(\"'-'\",\"neg\") for s in mainheader] #negative\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----STAR log final out report----####\n");
			string_buffer.append("if logfin == 1:\n");
			string_buffer.append("	print(\"STAR Log Final Report summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	for line in logfin.read().splitlines()[5:] :\n");
			string_buffer.append("		if '|' in line:\n");
			string_buffer.append("			head=line.lstrip().replace(' ','_').split('|')[0]\n");
			string_buffer.append("			if '%' in head:\n");
			string_buffer.append("				head=head.replace('%','_fraction_')\n");
			string_buffer.append("			val=line.replace('\t','').split('|')[-1]\n");
			string_buffer.append("			mainheader=np.append(mainheader,[head])\n");
			string_buffer.append("			mainstats=np.append(mainstats,[val])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----infer experiment----####\n");
			string_buffer.append("if inferexp == 1:\n");
			string_buffer.append("	print(\"Infer Experiment summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	failed=inferexp.read().splitlines()[3]\n");
			string_buffer.append("	failh=failed.replace(' ','_').split(':')[0]\n");
			string_buffer.append("	failv=failed.replace(' ','').split(':')[-1]\n");
			string_buffer.append("	inferexp.seek(0)\n");
			string_buffer.append("	forw=inferexp.read().splitlines()[4]\n");
			string_buffer.append("	frowh='_'.join(forw.split(' ')[0:4])+'_stranded_forward'\n");
			string_buffer.append("	frowv=forw.replace(' ','').split(':')[-1]\n");
			string_buffer.append("	inferexp.seek(0)\n");
			string_buffer.append("	rev=inferexp.read().splitlines()[5]\n");
			string_buffer.append("	revh='_'.join(rev.split(' ')[0:4])+'_stranded_reverse'\n");
			string_buffer.append("	revv=rev.replace(' ','').split(':')[-1]\n");
			string_buffer.append("	mainheader=np.append(mainheader,[failh,frowh,revh])\n");
			string_buffer.append("	mainstats=np.append(mainstats,[failv,frowv,revv])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----inner distance----####\n");
			string_buffer.append("if innerdist == 1:\n");
			string_buffer.append("	print(\"Inner Distance summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	indis=innerdist.read().splitlines()[1]\n");
			string_buffer.append("	indis=indis.split('\t')\n");
			string_buffer.append("	sampname2='_'.join(indis[0].split('_')[0:5])\n");
			string_buffer.append("	indismean=indis[1]\n");
			string_buffer.append("	indismed=indis[2]\n");
			string_buffer.append("	indissd=indis[3]\n");
			string_buffer.append("	mainheader=np.append(mainheader,[\"inner_distance_mean\",\"inner_distance_median\",\"inner_distance_sd\"])\n");
			string_buffer.append("	mainstats=np.append(mainstats,[indismean,indismed,indissd])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----read distribution----####\n");
			string_buffer.append("if readdist == 1:\n");
			string_buffer.append("	print(\"Read Distribution summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	for line in readdist.read().splitlines()[5:14]:\n");
			string_buffer.append("		headtot=line.split()[0]+'_total_bases'\n");
			string_buffer.append("		valtot=line.split()[1]\n");
			string_buffer.append("		headtag=line.split()[0]+'_tags/Kb'\n");
			string_buffer.append("		valtag=line.split()[3]\n");
			string_buffer.append("		mainheader=np.append(mainheader,[headtot,headtag])\n");
			string_buffer.append("		mainstats=np.append(mainstats,[valtot,valtag])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----intron summary----####\n");
			string_buffer.append("#if hasattr(args, 'intron') == True:\n");
			string_buffer.append("if intron == 1:\n");
			string_buffer.append("	print(\"Intron summary file missing\")\n");
			string_buffer.append("else:\n");
			string_buffer.append("	intrh=intron.read().splitlines()[0]\n");
			string_buffer.append("	intrh=intrh.replace(' ','_').split('\t')\n");
			string_buffer.append("	intrh1n=intrh[1].replace('%','Fraction_')\n");
			string_buffer.append("	mainheader=np.append(mainheader,[intrh1n,intrh[2],intrh[3],intrh[4],intrh[5]])\n");
			string_buffer.append("	intron.seek(0)\n");
			string_buffer.append("	intrv=intron.read().splitlines()[1]\n");
			string_buffer.append("	intrv=intrv.split('\t')\n");
			string_buffer.append("	intrvperc=float(intrv[1])/100\n");
			string_buffer.append("	mainstats=np.append(mainstats,[intrvperc,intrv[2],intrv[3],intrv[4],intrv[5]])\n");
			string_buffer.append("	sampname3=intrv[0].split('.')[0]\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----remove/replace certain special characters----####\n");
			string_buffer.append("mainheader=[s.replace(\"'\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\"(\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\")\",\"\") for s in mainheader]  #safe\n");
			string_buffer.append("mainheader=[s.replace(\"/\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\":\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\"\\\\\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\"-\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("mainheader=[s.replace(\",\",\"_\") for s in mainheader] #safe\n");
			string_buffer.append("\n");
			string_buffer.append("## checks for no values and zeros and percentages turned to fractions\n");
			string_buffer.append("for i,j in enumerate(mainstats):\n");
			string_buffer.append("	if len(j) == 0:\n");
			string_buffer.append("		mainstats[i]='NA'\n");
			string_buffer.append("	if j == '0':\n");
			string_buffer.append("		mainstats[i]='NA'\n");
			string_buffer.append("	if '%' in j:\n");
			string_buffer.append("		x=float(mainstats[i].replace('%',''))\n");
			string_buffer.append("		mainstats[i]=x/100\n");
			string_buffer.append("\n");
			string_buffer.append("## checks for missing items and zeros, removes leading and trailing '_' and capitalize first letter\n");
			string_buffer.append("for i,j in enumerate(mainheader):\n");
			string_buffer.append("	if '_' in j:\n");
			string_buffer.append("		mainheader[i]=mainheader[i].strip('_')\n");
			string_buffer.append("	mainheader[i]=mainheader[i].capitalize()\n");
			string_buffer.append("	if len(j) == 0:\n");
			string_buffer.append("		mainheader[i]='NA'\n");
			string_buffer.append("	if j == '0':\n");
			string_buffer.append("		mainheader[i]='NA'\n");
			string_buffer.append("\n");
			string_buffer.append("mainheader=np.delete(mainheader, [0])\n");
			string_buffer.append("mainstats=np.delete(mainstats, [0])\n");
			string_buffer.append("\n");
			string_buffer.append("\n");
			string_buffer.append("####----Output----####\n");
			string_buffer.append("if samp == 1: #user did not give sample name\n");
			string_buffer.append("	if 'sampname' in locals(): #get samplename from TIN file\n");
			string_buffer.append("		if args.row:\n");
			string_buffer.append("			outfile=open(\"\".join(sampname+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("		if args.column:\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("		if (args.row == False) and (args.column == False):\n");
			string_buffer.append("			outfile=open(\"\".join(sampname+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("	elif 'sampname2' in locals(): #get samplename from inner distance file\n");
			string_buffer.append("		if args.row:\n");
			string_buffer.append("			outfile=open(\"\".join(sampname2+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("		if args.column:\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname2+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("		if (args.row == False) and (args.column == False):\n");
			string_buffer.append("			outfile=open(\"\".join(sampname2+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname2+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("	elif 'sampname3' in locals(): #get samplename from intron file\n");
			string_buffer.append("		if args.row:\n");
			string_buffer.append("			outfile=open(\"\".join(sampname3+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("		if args.column:\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname3+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("		if (args.row == False) and (args.column == False):\n");
			string_buffer.append("			outfile=open(\"\".join(sampname3+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("			outfile2=open(\"\".join(sampname3+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("	else: #generic sample name\n");
			string_buffer.append("		if args.row:\n");
			string_buffer.append("			outfile=open(\"sample_summary_row.tsv\", 'w')\n");
			string_buffer.append("		if args.column:\n");
			string_buffer.append("			outfile2=open(\"sample_summary_col.tsv\", 'w')\n");
			string_buffer.append("		if (args.row == False) and (args.column == False):\n");
			string_buffer.append("			outfile=open(\"sample_summary_row.tsv\", 'w')\n");
			string_buffer.append("			outfile2=open(\"sample_summary_col.tsv\", 'w')\n");
			string_buffer.append("else: #user given sample name\n");
			string_buffer.append("	if args.row:\n");
			string_buffer.append("		outfile=open(\"\".join(samp+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("	if args.column:\n");
			string_buffer.append("		outfile2=open(\"\".join(samp+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("	if (args.row == False) and (args.column == False):\n");
			string_buffer.append("		outfile=open(\"\".join(samp+\"_summary_row.tsv\"), 'w')\n");
			string_buffer.append("		outfile2=open(\"\".join(samp+\"_summary_col.tsv\"), 'w')\n");
			string_buffer.append("\n");
			string_buffer.append("## Write numpy array to tab delimited file\n");
			string_buffer.append("#as rows\n");
			string_buffer.append("if args.row:\n");
			string_buffer.append("	summarray=np.vstack((mainheader,mainstats))\n");
			string_buffer.append("	np.savetxt(outfile, summarray, fmt='%s', delimiter='\t')\n");
			string_buffer.append("#as columns\n");
			string_buffer.append("if args.column:\n");
			string_buffer.append("	summarray2=np.column_stack((mainheader,mainstats))\n");
			string_buffer.append("	np.savetxt(outfile2, summarray2, fmt='%s', delimiter='\t')\n");
			string_buffer.append("#both\n");
			string_buffer.append("if (args.row == False) and (args.column == False):\n");
			string_buffer.append("	summarray=np.vstack((mainheader,mainstats))\n");
			string_buffer.append("	np.savetxt(outfile, summarray, fmt='%s', delimiter='\t')\n");
			string_buffer.append("	summarray2=np.column_stack((mainheader,mainstats))\n");
			string_buffer.append("	np.savetxt(outfile2, summarray2, fmt='%s', delimiter='\t')\n");
			
			out.write(string_buffer.toString());
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
